#import <objc/Object.h>#import <stdio.h>#import <stdlib.h>@interface HandlePGM : Object{	FILE *image;}-(id)init;-(int)setImage : (char *)inImage;-(void)outputImage : (char *)outImage;@end@interface Binarization : HandlePGM{	int threshold;}-(id)init;-(void)setThreshold : (int)idata;-(void)outputImage : (char *)outImage;@end@interface Labeling : HandlePGM{}-(id)init;-(void)outputImage : (char *)outImage;@end@implementation HandlePGM-(id)init{	self = [super init];		image = NULL;		return self;}-(int)setImage : (char *)inImage{	int i = 0, cnt = 0;	char extension[10] = {""};	for(; inImage[cnt] != '\0'; ++cnt){}	for(; inImage[cnt] != '.'; --cnt){}	for(i = 0; inImage[cnt] != '\0'; ++i, ++cnt){		extension[i] = inImage[cnt];	}		if(extension == ".pgm"){		image = fopen(inImage, "r");		if(image == NULL){			printf("Not found this image.\n");			return (-1);		}	}else{		printf("The file that has this extension cannot treat.\n");		return (-2);	}		return 1;}-(void)outputImage : (char *)outImage{	int i = 0, pixcel =0;	FILE *output = NULL;		output = fopen(outImage, "w");		while((pixcel = (int)fgetc(image)) != EOF){	fputc(pixcel, output);}}@end@implementation Binarization-(id)init{	self = [super init];		threshold = 0;		return self;}-(void)setThreshold : (int) idata{	threshold = idata;}-(void)outputImage : (char *)outImage{	}@end@implementation Labeling-(id)init{	self = [super init];		return self;}-(void)outputImage : (char *)outImage{	}@endint main(void);int main(){		return (0);}