#include<cstdio>#include<cstdlib>#ifndef PNM_CH#define MASK 0x01#define PNM_CHclass HandlePnm{  private:	FILE *img;	//image file	int iWidth;	//image's width	int iHeight;	//image's height	int	iBrightness;	//image's brightness(only P1, P2, P4, P5)	int	threshold;	//threshold of binarization	int *pixcel;	//array of image's pixcels	char *iType;	//image's type(P1, P2, P3, P4, P5, P6)  public:	HandlePnm();	//constructor	HandlePnm(char *);	HandlePnm(char *, int);	~HandlePnm();	//distructor	void setPnm(char *);	//setter	char *getType();	//getter	int getWidth();	int getHeight();	int *getPixcel();	int *getBinPixcel();	void writePbm(char *);	//make PBM file};HandlePnm::HandlePnm(){	img = NULL;	iWidth = 0;	iHeight = 0;	iBrightness = 0;	threshold = 0;	iType = NULL;	pixcel = NULL;}HandlePnm::HandlePnm(char path[]){	int i = 0;	unsigned char work = 0;	unsigned char *wp = NULL;			iType = new char[2];	this->threshold = 0;	if((img = fopen(path, "rb")) == NULL){		fprintf(stderr, "Error : File Is Not Found.\n");		exit(-1);	}	fscanf(img, "%s", iType);	if(iType[1] == '4'){	//Binary PBM File Open		//PBM is 8[pixcel / Byte]		fscanf(img, "%d %d", &iWidth, &iHeight);		iBrightness = 0;		pixcel = new int[iWidth * iHeight];			while(!feof(img)){			fread(&work, sizeof(char), 1, img);			for(int j = 0; j < 8 && i < (iWidth * iHeight); ++i, ++j){				work = work >> j;				pixcel[i] = (int)(work & MASK);			}		}	}else if(iType[1] == '5'){	//Binary PGM FIle Open		//PGM is 1[pixcel /Byte]		fscanf(img, "%d %d %d", &iWidth, &iHeight, &iBrightness);		pixcel = new int[iWidth * iHeight];			wp = new unsigned char[iWidth * iHeight];		fread(wp, sizeof(char), (iWidth * iHeight), img);		while(i < (iWidth * iHeight)){			pixcel[i] = (int)wp[i];			++i;		}		delete [] wp;	}else{		fprintf(stderr, "This file's header is not P4 or P5\n");		exit(-2);	}}HandlePnm::HandlePnm(char path[], int threshold){	int i = 0;	unsigned char work = 0;	unsigned char *wp;		iType = new char[2];	this->threshold = threshold;	if((img = fopen(path, "rb")) == NULL){		fprintf(stderr, "Error : File Is Not Found.\n");		exit(-1);	}	fscanf(img, "%s", iType);	if(iType[1] == '4'){		fscanf(img, "%d %d", &iWidth, &iHeight);		iBrightness = 0;		pixcel = new int[iWidth * iHeight];			while(!feof(img)){			fread(&work, sizeof(char), 1, img);			for(int j = 0; j < 8 && i < (iWidth * iHeight); ++i, ++j){				work = work >> j;				pixcel[i] = (int)(work & MASK);			}		}	}else if(iType[1] == '5'){		fscanf(img, "%d %d %d", &iWidth, &iHeight, &iBrightness);		pixcel = new int[iWidth * iHeight];			wp = new unsigned char[iWidth * iHeight];		fread(wp, sizeof(char), (iWidth * iHeight), img);		while(i < (iWidth * iHeight)){			pixcel[i] = (int)wp[i];			++i;		}		delete [] wp;	}else{		fprintf(stderr, "This file's header is not P4 or P5\n");		exit(-2);	}}HandlePnm::~HandlePnm(){	if(iType != NULL)	delete [] iType;	if(pixcel != NULL)	delete [] pixcel;	if(img != NULL)	fclose(img);}void HandlePnm::setPnm(char path[]){	int i = 0;	unsigned char work = 0;	unsigned char *wp = NULL;		if((img = fopen(path, "rb")) == NULL){		fprintf(stderr, "Error : File Is Not Found.\n");		exit(-1);	}	if(iType == NULL)	iType = new char[2];	//already make this variable	fscanf(img, "%s", iType);	if(iType[1] == '4'){		fscanf(img, "%d %d", &iWidth, &iHeight);		iBrightness = 0;		if(pixcel != NULL)	delete [] pixcel;	//already make this variable		pixcel = new int[iWidth * iHeight];			while(!feof(img)){			fread(&work, sizeof(char), 1, img);			for(int j = 0; j < 8 && i < (iWidth * iHeight); ++i, ++j){				work = work >> j;				pixcel[i] = (int)(work & MASK);			}		}	}else if(iType[1] == '5'){		fscanf(img, "%d %d %d", &iWidth, &iHeight, &iBrightness);		if(pixcel != NULL)	delete [] pixcel;	//already make this variable		pixcel = new int[iWidth * iHeight];			wp = new unsigned char[iWidth * iHeight];		fread(wp, sizeof(char), (iWidth * iHeight), img);		while(i < (iWidth * iHeight)){			pixcel[i] = (int)wp[i];			++i;		}		delete [] wp;	//work pointer is deleted	}else{		fprintf(stderr, "This file's header is not P4 or P5\n");		exit(-2);	}}char *HandlePnm::getType(){	return iType;}int HandlePnm::getWidth(){	return iWidth;}int HandlePnm::getHeight(){	return iHeight;}int *HandlePnm::getPixcel(){	return pixcel;}int *HandlePnm::getBinPixcel(){	int i = 0;		if(iType[1] == '5'){		while(i < (iWidth * iHeight)){			((pixcel[i]) >= threshold) ? (pixcel[i] = 0) : (pixcel[i] =1);	//ternary operation			//(conditional equation) ? (when true) : (when false)			++i;		}	}		return pixcel;}void HandlePnm::writePbm(char path[]){	int i = 0;	FILE *tmp;	tmp = fopen(path, "w");	fprintf(tmp, "P1\n%d\n%d\n", iWidth, iHeight);			if(iType[1] == '4'){		while(i < (iWidth * iHeight)){			fprintf(tmp, "%d ", pixcel[i]);			if((++i % iWidth) == 0)	fprintf(tmp, "\n");		}	}else if(iType[1] == '5'){		while(i < (iWidth * iHeight)){			((pixcel[i]) >= threshold) ? (fprintf(tmp, "0 ")) : (fprintf(tmp, "1 "));	//ternary operation			//(conditional equation) ? (when true) : (when false)			if((++i % iWidth) == 0) fputs("\n", tmp);		}	}	fclose(tmp);}#endif